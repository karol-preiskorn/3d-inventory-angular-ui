import { Observable, of, throwError } from 'rxjs';
import { catchError, map, retry } from 'rxjs/operators';
import { SyncRequestClient } from 'ts-sync-request/dist';

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable, NgZone } from '@angular/core';
import { Router } from '@angular/router';

import { environment } from '../../environments/environment';
import { Device, DeviceCreate } from '../shared/device';
import { Log, LogIn, LogService } from './log.service';

@Injectable({
  providedIn: 'root',
})
/**
 * Service for managing devices in mongoAtlas
 */
export class DeviceService {
  baseurl = environment.baseurl
  private objectName = 'devices'

  constructor(
    private http: HttpClient,
    private logService: LogService,
    private ngZone: NgZone,
    private router: Router,
  ) {}

  httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json',
      Accept: 'application/json',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',
    }),
  }

  /**
   * Retrieves the list of devices.
   *
   * @returns An Observable that emits an array of Device objects.
   */
  GetDevices(): Observable<Device[]> {
    return this.http
      .get<Device[]>(environment.baseurl + '/' + this.objectName + '/')
      .pipe(retry(1), catchError(this.errorHandl))
  }

  /**
   * Retrieves a device by its ID.
   *
   * @param id The ID of the device to retrieve.
   * @returns An Observable that emits the retrieved device.
   */
  GetDevice(id: string): Observable<Device> {
    return this.http
      .get<Device>(environment.baseurl + '/' + this.objectName + '/' + id, this.httpOptions)
      .pipe(retry(1), catchError(this.errorHandl))
  }

  /**
   * Retrieves a device by its ID and returns a synchronous request client.
   *
   * @param id - The ID of the device to retrieve.
   * @returns A synchronous request client for getting the device.
   */
  getDeviceSynchronize(id: string) {
    return new SyncRequestClient().get<Device>(environment.baseurl + '/' + this.objectName + '/' + id)
  }

  /**
   * Retrieves a device synchronously by its ID.
   *
   * @param id The ID of the device to retrieve.
   * @returns An Observable that emits the retrieved Device object.
   */
  GetDeviceSynchro(id: string): Observable<Device> {
    return this.http.get<Device>(environment.baseurl + '/' + this.objectName + '/' + id).pipe(
      map((res) => {
        return res
      }),
      catchError(this.errorHandl),
    )
  }

  /**
   * Deletes a device with the specified ID.
   *
   * @param id The ID of the device to delete.
   * @returns An Observable that emits the deleted device.
   */
  DeleteDevice(id: string): Observable<Device> {
    return this.http
      .delete<Device>(environment.baseurl + '/' + this.objectName + '/' + id, this.httpOptions)
      .pipe(retry(1), catchError(this.errorHandl))
  }

  /**
   * Creates a new device.
   * DeviceCreate - type without _id because it is generated by the server.
   *
   * @param data The device data to be created.
   * @returns An observable that emits the created device.
   */
  CreateDevice(data: DeviceCreate): Observable<Device> {
    return this.http
      .post<Device>(
        environment.baseurl + '/' + this.objectName + '/',
        JSON.stringify(data, null, ' '),
        this.httpOptions,
      )
      .pipe(retry(1), catchError(this.errorHandl))
  }

  /**
   * Clones a device by creating a new device based on the provided device ID.
   *
   * @param id - The ID of the device to clone.
   * @returns The cloned device object.
   */
  CloneDevice({ id }: { id: string }): object {
    let result: any = {} // Update the type of result to any
    this.GetDevice(id).subscribe((value: Device) => {
      console.info('Get Device: ' + JSON.stringify(value, null, ' '))
      const deviceToCreate = value as DeviceCreate
      if (deviceToCreate.hasOwnProperty('_id')) {
        delete deviceToCreate['_id']
      }
      console.info('Clone DeviceCreate: ' + JSON.stringify(deviceToCreate, null, ' '))
      deviceToCreate.name += ' (Clone)'
      result = this.CreateDevice(deviceToCreate).subscribe({
        next: (v) => {
          console.info('Create Cloned Device: ' + JSON.stringify(v, null, ' '))
          const log: LogIn = {
            objectId: result._id,
            operation: 'Clone',
            component: 'Device',
            message: deviceToCreate,
          }
          console.log('LogService.CreateLog: ' + JSON.stringify(log, null, ' '))
          return this.http
            .post<Log | LogIn>(`${environment.baseurl}/logs/`, log, this.httpOptions)
            .pipe(retry(1), catchError(this.handleErrorTemplate<LogIn>('CreateLog', log)))
          this.ngZone.run(() => this.router.navigateByUrl('device-list'))
        },
        /* ,
        complete: () => this.ngZone.run(() => this.router.navigateByUrl('device-list')),
        */
      })
    })
    return result
  }

  /**
   * Updates a device with the specified ID.
   *
   * @param id - The ID of the device to update.
   * @param data - The updated device data.
   * @returns An Observable that emits the updated device.
   */
  UpdateDevice(data: Device): Observable<Device> {
    console.log(
      'device.service.UpdateDevice: PUT ' +
        environment.baseurl +
        '/devices/' +
        data._id +
        '  ' +
        JSON.stringify(data, null, ' '),
    )
    return this.http
      .put<Device>(environment.baseurl + '/devices/' + data._id, JSON.stringify(data, null, ' '), this.httpOptions)
      .pipe(catchError(this.handleErrorTemplate<Device>('UpdateDevice', data)))
  }

  postDevice(data: Device): Observable<Device> {
    return this.http
      .post<Device>(`${environment.baseurl}/devices`, JSON.stringify(data, null, ' '), this.httpOptions)
      .pipe(retry(1), catchError(this.handleErrorTemplate<Device>('postLog', data)))
  }

  /**
   * Handles the error response from the server.
   *
   * @param error - The error object containing the error message and status.
   * @returns An Observable that emits an error message.
   */
  errorHandl(error: { error: { message: string }; status: number; message: string }): Observable<never> {
    let errorMessage = ''
    if (error.error instanceof ErrorEvent) {
      errorMessage = error.error.message
    } else {
      errorMessage = `Error: ${error.status} Message: ${error.message}`
    }
    // console.log(`${error.message}`)

    return throwError(() => {
      return errorMessage
    })
  }

  /**
   * Handle Http operation that failed. Let the app continue.
   *
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleErrorTemplate<T>(operation = 'operation', result?: T) {
    return (error: Error): Observable<T> => {
      console.error(`DeviceService.handleErrorTemplate operation: ${operation}, error: ${error.message}`)
      return of(result as T)
    }
  }
}
